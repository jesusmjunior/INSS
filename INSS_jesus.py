import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(page_title="Dashboard Previdenci√°rio Profissional", layout="wide")

# Fun√ß√µes organizadas
def organizar_cnis(file):
    df = pd.read_csv(file, delimiter=';', encoding='utf-8')
    df = df.iloc[:,0].str.split(',', expand=True)
    df.columns = ['Seq', 'Compet√™ncia', 'Remunera√ß√£o', 'Ano']
    df['Remunera√ß√£o'] = pd.to_numeric(df['Remunera√ß√£o'], errors='coerce')
    df = df[df['Remunera√ß√£o'] < 50000]  # Fuzzy: Remove discrepantes
    return df

def organizar_desconsiderados(file):
    df = pd.read_csv(file, delimiter=';', encoding='utf-8')
    df = df.iloc[:,0].str.split(',', expand=True)
    df.columns = ['Seq', 'Seq.', 'Data', 'Sal√°rio', '√çndice', 'Sal. Corrigido', 'Observa√ß√£o', 'Ano', 'Duplicado']
    df['Sal. Corrigido'] = pd.to_numeric(df['Sal. Corrigido'], errors='coerce')
    return df

def fator_previdenciario(Tc, Es, Id, a=0.31):
    fator = (Tc * a / Es) * (1 + ((Id + Tc * a) / 100))
    return round(fator, 4)

# Upload
st.sidebar.header("üîΩ Upload dos Arquivos")
cnis_file = st.sidebar.file_uploader("Upload - CNIS", type=["csv"])
carta_file = st.sidebar.file_uploader("Upload - Carta", type=["csv"])
desconsid_file = st.sidebar.file_uploader("Upload - Desconsiderados", type=["csv"])

# Abas Navega√ß√£o
aba = st.sidebar.radio("Navega√ß√£o", ["Dashboard", "Gr√°ficos", "Explica√ß√£o", "Simulador", "Relat√≥rio"])

# Processamento ap√≥s Upload
if cnis_file and carta_file and desconsid_file:

    df_cnis = organizar_cnis(cnis_file)
    df_desconsiderados = organizar_desconsiderados(desconsid_file)

    # 80% maiores sal√°rios
    df_cnis_sorted = df_cnis.sort_values(by='Remunera√ß√£o', ascending=False)
    qtd_80 = int(len(df_cnis_sorted) * 0.8)
    df_top80 = df_cnis_sorted.head(qtd_80)
    df_bottom10 = df_cnis_sorted.tail(len(df_cnis_sorted) - qtd_80)

    # Desconsiderados vantajosos
    min_80 = df_top80['Remunera√ß√£o'].min()
    df_vantajosos = df_desconsiderados[df_desconsiderados['Sal. Corrigido'] > min_80]

    # Par√¢metros default
    Tc_default, Es_default, Id_default, a_default = 38, 21.8, 60, 0.31
    media_salarios = df_top80['Remunera√ß√£o'].mean()
    fator = fator_previdenciario(Tc_default, Es_default, Id_default, a_default)
    salario_beneficio = round(media_salarios * fator, 2)

    # Dashboard Principal
    if aba == "Dashboard":
        st.title("üìë Dashboard Previdenci√°rio Profissional")

        col1, col2, col3 = st.columns(3)
        col1.metric("Total CNIS", len(df_cnis))
        col2.metric("80% Maiores Sal√°rios", len(df_top80))
        col3.metric("Desconsid. Reaproveitados", len(df_vantajosos))

        st.subheader("üßÆ Resultados Previdenci√°rios")
        st.write(f"**M√©dia dos 80% maiores sal√°rios:** R$ {media_salarios:,.2f}")
        st.write(f"**Fator Previdenci√°rio:** {fator}")
        st.write(f"**Sal√°rio de Benef√≠cio:** R$ {salario_beneficio:,.2f}")

        st.subheader("üìÑ Tabelas Detalhadas")
        st.dataframe(df_top80)
        st.dataframe(df_vantajosos)

        # Prepara√ß√£o correta para concatena√ß√£o
        df_vantajosos['Compet√™ncia'] = df_vantajosos['Data']
        df_vantajosos['Remunera√ß√£o'] = df_vantajosos['Sal. Corrigido']
        df_vantajosos['Considerado'] = 'Reaproveitado'
        consolidado = df_top80.copy()
        consolidado['Considerado'] = 'Sim'
        consolidado_final = pd.concat(
            [consolidado[['Compet√™ncia', 'Remunera√ß√£o', 'Considerado']],
             df_vantajosos[['Compet√™ncia', 'Remunera√ß√£o', 'Considerado']]],
            ignore_index=True
        )
        st.sidebar.download_button(label="‚¨áÔ∏è Baixar Consolidado CSV", data=consolidado_final.to_csv(index=False).encode('utf-8'), file_name='Consolidado_Final.csv', mime='text/csv')

    # Gr√°ficos
    elif aba == "Gr√°ficos":
        st.title("üìä Visualiza√ß√£o Gr√°fica")
        st.bar_chart(data=df_top80, x='Compet√™ncia', y='Remunera√ß√£o')
        st.line_chart(data=df_top80, x='Compet√™ncia', y='Remunera√ß√£o')

    # Explica√ß√£o
    elif aba == "Explica√ß√£o":
        st.title("üìñ Explica√ß√£o Detalhada")
        st.markdown("### F√≥rmula Utilizada:")
        st.latex(r'''
        Fator\ Previdenci√°rio = \frac{T_c \times a}{E_s} \times \left(1 + \frac{I_d + T_c \times a}{100}\right)
        ''')
        st.markdown("""
        Onde:
        - $T_c = 38$ anos (Tempo de Contribui√ß√£o)
        - $E_s = 21,8$ anos (Expectativa Sobrevida)
        - $I_d = 60$ anos (Idade)
        - $a = 0,31$ (Al√≠quota)
        """)
        st.latex(fr'''
        Sal√°rio\ Benef√≠cio = M√©dia_{{80\%}} \times {fator} = {salario_beneficio:,.2f}
        ''')
        st.markdown("### Aplica√ß√£o Fuzzy:")
        st.markdown("- Œ≥ (Gama): Elimina√ß√£o de sal√°rios an√¥malos (> R$50.000)")
        st.markdown("- Œ± (Alfa): Estrutura organizada por fun√ß√µes")
        st.markdown("- Œ∏ (Theta): Visualiza√ß√£o otimizada com LaTeX")

    # Simulador
    elif aba == "Simulador":
        st.title("‚öôÔ∏è Simulador")
        Tc_input = st.number_input("Tempo de Contribui√ß√£o (anos)", value=38)
        Es_input = st.number_input("Expectativa Sobrevida", value=21.8)
        Id_input = st.number_input("Idade", value=60)
        a_input = st.number_input("Al√≠quota", value=0.31)
        fator_simulado = fator_previdenciario(Tc_input, Es_input, Id_input, a_input)
        salario_simulado = round(media_salarios * fator_simulado, 2)
        st.write(f"**Fator Previdenci√°rio Simulado:** {fator_simulado}")
        st.write(f"**Sal√°rio Benef√≠cio Simulado:** R$ {salario_simulado:,.2f}")

    # Relat√≥rio Final
    elif aba == "Relat√≥rio":
        st.title("üìÑ Relat√≥rio Consolidado Completo")
        st.dataframe(consolidado_final)
        st.sidebar.download_button(label="‚¨áÔ∏è Download Relat√≥rio", data=consolidado_final.to_csv(index=False).encode('utf-8'), file_name='Relatorio_Completo.csv', mime='text/csv')

else:
    st.info("
