import streamlit as st
import pandas as pd
import numpy as np

# ================================
# CONFIGURA√á√ÉO INICIAL
# ================================
st.set_page_config(page_title="Dashboard Previdenci√°rio Profissional", layout="wide")

# ================================
# LOGIN SIMPLES
# ================================
def login():
    st.title("üîê √Årea Protegida - Login Obrigat√≥rio")
    user = st.text_input("Usu√°rio (Email)")
    password = st.text_input("Senha", type="password")

    # Definindo os usu√°rios e senhas v√°lidos
    if (user == "jesusmjunior2021@gmail.com" and password == "jr010507") or (user == "joliveiramaccf@gmail.com" and password == "cgti@383679"):
        st.success("Login efetuado com sucesso ‚úÖ")
        return True
    else:
        if user and password:
            st.error("Usu√°rio ou senha incorretos ‚ùå")
        return False

# ================================
# FUN√á√ïES DE PROCESSAMENTO
# ================================

# Organiza o CNIS (para os dados exportados em CSV ou XLSX)
def organizar_cnis(file):
    df = pd.read_csv(file, delimiter=';', encoding='utf-8')

    # Divide a primeira coluna em v√°rias partes com base na v√≠rgula
    df_split = df.iloc[:, 0].str.split(',', expand=True)
    df_split.columns = ['Seq', 'Compet√™ncia', 'Remunera√ß√£o', 'Ano'][:df_split.shape[1]]

    # Converte a coluna 'Remunera√ß√£o' para num√©rico e aplica o filtro fuzzy
    df_split['Remunera√ß√£o'] = pd.to_numeric(df_split['Remunera√ß√£o'], errors='coerce')
    df_split = df_split[df_split['Remunera√ß√£o'] < 50000]  # Filtro fuzzy
    return df_split

# Organiza os dados da Carta Benef√≠cio
def organizar_desconsiderados(file):
    df = pd.read_csv(file, delimiter=';', encoding='utf-8')
    df = df.iloc[:, 0].str.split(',', expand=True)
    df.columns = ['Seq', 'Seq.', 'Data', 'Sal√°rio', '√çndice', 'Sal. Corrigido', 'Observa√ß√£o', 'Ano', 'Duplicado']
    df['Sal. Corrigido'] = pd.to_numeric(df['Sal. Corrigido'], errors='coerce')
    return df

# Calcula o fator previdenci√°rio
def fator_previdenciario(Tc, Es, Id, a=0.31):
    return round((Tc * a / Es) * (1 + ((Id + Tc * a) / 100)), 4)

# Formata√ß√£o para moeda
def formatar_moeda(valor):
    return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

# ================================
# EXECU√á√ÉO DO APP
# ================================
if login():  # Executa o login

    # UPLOAD DOS ARQUIVOS
    st.sidebar.header("üîΩ Upload dos Arquivos")
    cnis_file = st.sidebar.file_uploader("Upload - CNIS", type=["csv"])
    carta_file = st.sidebar.file_uploader("Upload - Carta", type=["csv"])
    desconsid_file = st.sidebar.file_uploader("Upload - Desconsiderados", type=["csv"])

    # Navega√ß√£o
    aba = st.sidebar.radio("Navega√ß√£o", ["Dashboard", "Gr√°ficos", "Explica√ß√£o", "Simulador", "Relat√≥rio"])

    # Verificando se os arquivos foram carregados
    if cnis_file and carta_file and desconsid_file:
        # Processando os arquivos
        df_cnis = organizar_cnis(cnis_file)
        df_desconsiderados = organizar_desconsiderados(desconsid_file)

        # Processamento para os 80% maiores sal√°rios
        df_cnis_sorted = df_cnis.sort_values(by='Remunera√ß√£o', ascending=False)
        qtd_80 = int(len(df_cnis_sorted) * 0.8)
        df_top80 = df_cnis_sorted.head(qtd_80)

        # Calculando os par√¢metros
        Tc_default, Es_default, Id_default, a_default = 38, 21.8, 60, 0.31
        media_salarios = df_top80['Remunera√ß√£o'].mean()
        fator = fator_previdenciario(Tc_default, Es_default, Id_default, a_default)
        salario_beneficio = round(media_salarios * fator, 2)

        # Formata√ß√£o monet√°ria
        df_top80['Remunera√ß√£o'] = df_top80['Remunera√ß√£o'].apply(formatar_moeda)

        # ================================
        # ABAS PRINCIPAIS
        # ================================
        if aba == "Dashboard":
            st.title("üìë Dashboard Previdenci√°rio Profissional")

            col1, col2, col3 = st.columns(3)
            col1.metric("Total CNIS", len(df_cnis))
            col2.metric("80% Maiores Sal√°rios", len(df_top80))
            col3.metric("Sal√°rio de Benef√≠cio", formatar_moeda(salario_beneficio))

            st.subheader("üßÆ Resultados Previdenci√°rios")
            st.write(f"**M√©dia dos 80% maiores sal√°rios:** {formatar_moeda(media_salarios)}")
            st.write(f"**Fator Previdenci√°rio:** {fator}")
            st.write(f"**Sal√°rio de Benef√≠cio:** {formatar_moeda(salario_beneficio)}")

            st.subheader("üìÑ Tabelas Detalhadas")
            st.dataframe(df_top80)

        elif aba == "Gr√°ficos":
            st.title("üìä Visualiza√ß√£o Gr√°fica")
            df_grafico = df_cnis_sorted.head(qtd_80)
            st.bar_chart(data=df_grafico, x='Compet√™ncia', y='Remunera√ß√£o')
            st.line_chart(data=df_grafico, x='Compet√™ncia', y='Remunera√ß√£o')

        elif aba == "Explica√ß√£o":
            st.title("üìñ Explica√ß√£o Detalhada")
            st.markdown("### F√≥rmulas Aplicadas:")
            st.latex(r'''
            Fator\ Previdenci\u00e1rio = \frac{T_c \times a}{E_s} \times \left(1 + \frac{I_d + T_c \times a}{100}\right)
            ''')
            st.markdown(f"""
            Onde:
            - $T_c = 38$ anos (Tempo de Contribui√ß√£o)
            - $E_s = 21,8$ anos (Expectativa Sobrevida)
            - $I_d = 60$ anos (Idade)
            - $a = 0,31$ (Al√≠quota)
            """)
            st.latex(r'''
            Sal√°rio\ de\ Benef√≠cio = M√©dia_{80\%} \times Fator
            ''')
            st.markdown(f"**M√©dia = {formatar_moeda(media_salarios)}, Fator = {fator}, Resultado = {formatar_moeda(salario_beneficio)}**")

        elif aba == "Simulador":
            st.title("‚öôÔ∏è Simulador Previdenci√°rio")
            Tc_input = st.number_input("Tempo de Contribui√ß√£o (anos)", value=38)
            Es_input = st.number_input("Expectativa Sobrevida", value=21.8)
            Id_input = st.number_input("Idade", value=60)
            a_input = st.number_input("Al√≠quota", value=0.31)
            fator_simulado = fator_previdenciario(Tc_input, Es_input, Id_input, a_input)
            salario_simulado = round(media_salarios * fator_simulado, 2)
            st.write(f"**Fator Previdenci√°rio Simulado:** {fator_simulado}")
            st.write(f"**Sal√°rio Benef√≠cio Simulado:** {formatar_moeda(salario_simulado)}")

        elif aba == "Relat√≥rio":
            st.title("üìÑ Relat√≥rio Previdenci√°rio Consolidado")

            st.markdown("""
            ## Relat√≥rio Consolidado
            
            Este relat√≥rio apresenta os resultados detalhados do processamento previdenci√°rio conforme os dados enviados e as regras aplicadas.
            """)
            st.markdown(f"**Total de registros CNIS:** {len(df_cnis)}")
            st.markdown(f"**80% maiores sal√°rios considerados:** {len(df_top80)}")
            st.markdown(f"**Sal√°rios desconsiderados reaproveitados:** {len(df_desconsiderados)}")
            st.markdown("---")

            st.subheader("üìå Detalhamento dos 80% Maiores Sal√°rios")
            st.dataframe(df_top80)

            st.subheader("üìå Sal√°rios Desconsiderados Reaproveitados")
            st.dataframe(df_desconsiderados)

            st.subheader("üìå F√≥rmula Previdenci√°ria Aplicada")
            st.latex(r'''
            Fator\ Previdenci\u00e1rio = \frac{T_c \times a}{E_s} \times \left(1 + \frac{I_d + T_c \times a}{100}\right)
            ''')
            st.markdown(f"**Fator aplicado:** {fator}")
            st.markdown(f"**M√©dia dos sal√°rios:** {formatar_moeda(media_salarios)}")
            st.markdown(f"**Sal√°rio de Benef√≠cio Final:** {formatar_moeda(salario_beneficio)}")
            st.markdown("---")

            st.markdown("üìé **Este relat√≥rio pode ser impresso diretamente em PDF.**")

    else:
        st.info("üîî Fa√ßa upload dos 3 arquivos obrigat√≥rios para liberar o dashboard.")
