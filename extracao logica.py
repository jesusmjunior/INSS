import streamlit as st
import pandas as pd
import numpy as np
import re
from io import StringIO

# ===================== CONFIGURA√á√ÉO DA P√ÅGINA =====================
st.set_page_config(page_title="Jesus e INSS | Sistema Completo", layout="wide")

# T√≠tulo do App
st.title("üìÑ JESUS e INSS - Extrator CNIS & Carta Benef√≠cio")
st.write("**Recep√ß√£o de arquivos TXT bagun√ßados ‚ûî Organiza√ß√£o ‚ûî Visualiza√ß√£o das tabelas completas ‚ûî Exporta√ß√£o CSV.**")

# ===================== FUN√á√ïES DE LEITURA E ESTRUTURA√á√ÉO =====================

def ler_texto(uploaded_file):
    stringio = StringIO(uploaded_file.getvalue().decode("utf-8", errors='ignore'))
    texto = stringio.read()
    return texto

# Fun√ß√£o para aplicar a l√≥gica fuzzy para sanitiza√ß√£o
def fuzzy_sanitization(value):
    try:
        # Tentar converter o valor para num√©rico
        sanitized_value = pd.to_numeric(value, errors='coerce')
        if pd.isna(sanitized_value):
            return 0  # Substituir valores n√£o num√©ricos por 0
        return sanitized_value
    except Exception:
        return 0  # Se falhar, retorna 0 como valor padr√£o

def organizar_cnis(cnis_file):
    # L√™ o arquivo CSV com ponto e v√≠rgula como delimitador
    df_cnis = pd.read_csv(cnis_file, delimiter=";")
    
    # Verifica e renomeia as colunas
    df_cnis.columns = ['Seq', 'Compet√™ncia', 'Remunera√ß√£o', 'Ano']
    
    # Remover quaisquer espa√ßos extras nas c√©lulas de texto
    df_cnis = df_cnis.apply(lambda x: x.str.strip() if x.dtype == "object" else x)
    
    # Converte a coluna 'Remunera√ß√£o' para num√©rico
    df_cnis['Remunera√ß√£o'] = pd.to_numeric(df_cnis['Remunera√ß√£o'], errors='coerce')
    
    # Filtra para valores acima de 50.000 (caso desejado)
    df_cnis = df_cnis[df_cnis['Remunera√ß√£o'] > 50000]

    return df_cnis

def organizar_desconsiderados(desconsiderados_file):
    # L√™ o arquivo CSV com ponto e v√≠rgula como delimitador
    df_desconsiderados = pd.read_csv(desconsiderados_file, delimiter=";")
    
    # Verifica e renomeia as colunas
    df_desconsiderados.columns = ['Seq', 'Seq.', 'Data', 'Sal√°rio', '√çndice', 'Sal. Corrigido', 'Observa√ß√£o', 'Ano', 'Duplicado']
    
    # Remover quaisquer espa√ßos extras nas c√©lulas de texto
    df_desconsiderados = df_desconsiderados.apply(lambda x: x.str.strip() if x.dtype == "object" else x)
    
    # Converte as colunas num√©ricas
    df_desconsiderados['Sal√°rio'] = pd.to_numeric(df_desconsiderados['Sal√°rio'], errors='coerce')
    df_desconsiderados['Sal. Corrigido'] = pd.to_numeric(df_desconsiderados['Sal. Corrigido'], errors='coerce')
    
    # Filtra os dados com a observa√ß√£o "DESCONSIDERADO"
    df_desconsiderados = df_desconsiderados[df_desconsiderados['Observa√ß√£o'] == 'DESCONSIDERADO']
    
    return df_desconsiderados

def organizar_80_maiores_salarios(file):
    # L√™ o arquivo CSV com ponto e v√≠rgula como delimitador
    df = pd.read_csv(file, delimiter=";")
    
    # Verifica e renomeia as colunas
    df.columns = ['Seq', 'Compet√™ncia', 'Remunera√ß√£o', 'Ano']
    
    # Remover quaisquer espa√ßos extras nas c√©lulas de texto
    df = df.apply(lambda x: x.str.strip() if x.dtype == "object" else x)
    
    # Converte a coluna 'Remunera√ß√£o' para num√©rico
    df['Remunera√ß√£o'] = pd.to_numeric(df['Remunera√ß√£o'], errors='coerce')
    
    return df

def exportar_csv(df, nome_base):
    df.to_csv(f"{nome_base}.csv", index=False)
    return f"{nome_base}.csv"

# ===================== LAYOUT COM TABELAS =====================

st.subheader("üìä Tabelas Organizacionais")

col1, col2 = st.columns(2)

with col1:
    uploaded_cnis_file = st.file_uploader("üîΩ Upload do arquivo 80% Maiores Sal√°rios CNIS", type="csv", key="cnis_file")

with col2:
    uploaded_carta_file = st.file_uploader("üîΩ Upload do arquivo 80% Maiores Sal√°rios Carta", type="csv", key="carta_file")

with col1:
    uploaded_desconsiderados_file = st.file_uploader("üîΩ Upload do arquivo Sal√°rios Desconsiderados na Carta", type="csv", key="desconsiderados_file")

# ===================== PROCESSAMENTO DOS DADOS =====================

if uploaded_cnis_file and uploaded_carta_file and uploaded_desconsiderados_file:
    # Organiza os dados
    df_cnis = organizar_cnis(uploaded_cnis_file)
    df_carta = organizar_80_maiores_salarios(uploaded_carta_file)
    df_desconsiderados = organizar_desconsiderados(uploaded_desconsiderados_file)
    
    # Exibindo as tabelas separadas
    st.subheader("üìä Tabela CNIS")
    st.dataframe(df_cnis, use_container_width=True)
    
    st.subheader("üìä Tabela Carta Benef√≠cio")
    st.dataframe(df_carta, use_container_width=True)
    
    st.subheader("üìä Tabela de Sal√°rios Desconsiderados")
    st.dataframe(df_desconsiderados, use_container_width=True)
    
    # Bot√µes de download para cada tabela separada
    st.download_button("‚¨áÔ∏è Baixar CNIS CSV", data=df_cnis.to_csv(index=False).encode('utf-8'), file_name="Extrato_CNIS_Organizado.csv", mime='text/csv')
    st.download_button("‚¨áÔ∏è Baixar Carta CSV", data=df_carta.to_csv(index=False).encode('utf-8'), file_name="Carta_Beneficio_Organizada.csv", mime='text/csv')
    st.download_button("‚¨áÔ∏è Baixar Desconsiderados CSV", data=df_desconsiderados.to_csv(index=False).encode('utf-8'), file_name="Salarios_Desconsiderados_Carta.csv", mime='text/csv')

else:
    st.info("üîî Fa√ßa upload dos arquivos CNIS, Carta Benef√≠cio e Sal√°rios Desconsiderados para iniciar o processamento.")
